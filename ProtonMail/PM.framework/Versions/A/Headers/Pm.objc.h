// Objective-C API for talking to pm Go package.
//   gobind -lang=objc pm
//
// File is generated by gobind. Do not edit.

#ifndef __Pm_H__
#define __Pm_H__

@import Foundation;
#include "Universe.objc.h"


@class PmAddress;
@class PmDecryptSignedVerify;
@class PmEncryptedSigned;
@class PmEncryptedSplit;
@class PmKey;
@class PmOpenPGP;
@class PmSessionSplit;

@interface PmAddress : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
@end

@interface PmDecryptSignedVerify : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)plaintext;
- (void)setPlaintext:(NSString*)v;
- (BOOL)verify;
- (void)setVerify:(BOOL)v;
@end

@interface PmEncryptedSigned : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)encrypted;
- (void)setEncrypted:(NSString*)v;
- (NSString*)signature;
- (void)setSignature:(NSString*)v;
@end

@interface PmEncryptedSplit : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSData*)dataPacket;
- (void)setDataPacket:(NSData*)v;
- (NSData*)keyPacket;
- (void)setKeyPacket:(NSData*)v;
- (NSString*)algo;
- (void)setAlgo:(NSString*)v;
@end

@interface PmKey : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSString*)keyID;
- (void)setKeyID:(NSString*)v;
- (NSString*)publicKey;
- (void)setPublicKey:(NSString*)v;
- (NSString*)privateKey;
- (void)setPrivateKey:(NSString*)v;
- (NSString*)fingerPrint;
- (void)setFingerPrint:(NSString*)v;
@end

@interface PmOpenPGP : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (BOOL)addAddress:(PmAddress*)address ret0_:(BOOL*)ret0_ error:(NSError**)error;
- (BOOL)cleanAddresses:(BOOL*)ret0_ error:(NSError**)error;
- (NSString*)decryptMessage:(NSString*)encryptText passphras:(NSString*)passphras error:(NSError**)error;
- (NSString*)encryptMessage:(NSString*)addressID plainText:(NSString*)plainText passphrase:(NSString*)passphrase trim:(BOOL)trim error:(NSError**)error;
- (BOOL)removeAddress:(NSString*)addressID ret0_:(BOOL*)ret0_ error:(NSError**)error;
@end

@interface PmSessionSplit : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) id _ref;

- (instancetype)initWithRef:(id)ref;
- (instancetype)init;
- (NSData*)session;
- (void)setSession:(NSData*)v;
- (NSString*)algo;
- (void)setAlgo:(NSString*)v;
@end

FOUNDATION_EXPORT NSString* PmArmorKey(NSData* input, NSError** error);

FOUNDATION_EXPORT NSString* PmArmorWithType(NSData* input, NSString* armorType, NSError** error);

FOUNDATION_EXPORT NSString* PmCheckKey(NSString* pubKey, NSError** error);

FOUNDATION_EXPORT BOOL PmCheckPassphrase(NSString* privateKey, NSString* passphrase);

FOUNDATION_EXPORT NSData* PmDecryptAttachment(NSData* keyPacket, NSData* dataPacket, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSData* PmDecryptAttachmentWithPassword(NSData* keyPacket, NSData* dataPacket, NSString* password, NSError** error);

FOUNDATION_EXPORT NSString* PmDecryptMessage(NSString* encryptedText, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* PmDecryptMessageBinKey(NSString* encryptedText, NSData* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT PmDecryptSignedVerify* PmDecryptMessageVerify(NSString* encryptedText, NSString* veriferKey, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT PmDecryptSignedVerify* PmDecryptMessageVerifyBinKey(NSString* encryptedText, NSData* veriferKey, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* PmDecryptMessageWithPassword(NSString* encrypted, NSString* password, NSError** error);

FOUNDATION_EXPORT PmEncryptedSplit* PmEncryptAttachment(NSData* plainData, NSString* fileName, NSString* publicKey, NSError** error);

FOUNDATION_EXPORT PmEncryptedSplit* PmEncryptAttachmentBinKey(NSData* plainData, NSString* fileName, NSData* publicKey, NSError** error);

FOUNDATION_EXPORT NSString* PmEncryptAttachmentWithPassword(NSData* plainData, NSString* password, NSError** error);

FOUNDATION_EXPORT NSString* PmEncryptMessage(NSString* plainText, NSString* publicKey, NSString* privateKey, NSString* passphrase, BOOL trim, NSError** error);

FOUNDATION_EXPORT NSString* PmEncryptMessageBinKey(NSString* plainText, NSData* publicKey, NSString* privateKey, NSString* passphrase, BOOL trim, NSError** error);

FOUNDATION_EXPORT NSString* PmEncryptMessageWithPassword(NSString* plainText, NSString* password, NSError** error);

FOUNDATION_EXPORT PmKey* PmGenerateKey(NSString* userName, NSString* domain, NSString* passphrase, NSString* keyType, long bits, NSError** error);

FOUNDATION_EXPORT NSString* PmGetFingerprint(NSString* publicKey, NSError** error);

FOUNDATION_EXPORT NSString* PmGetFingerprintBinKey(NSData* publicKey, NSError** error);

FOUNDATION_EXPORT PmSessionSplit* PmGetSessionFromKeyPacket(NSData* keyPackage, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT PmSessionSplit* PmGetSessionFromSymmetricPacket(NSData* keyPackage, NSString* password, NSError** error);

FOUNDATION_EXPORT BOOL PmIsKeyExpired(NSString* publicKey, NSString* timeCheck, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT BOOL PmIsKeyExpiredBin(NSData* publicKey, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT NSData* PmKeyPacketWithPublicKey(PmSessionSplit* sessionSplit, NSString* publicKey, NSError** error);

FOUNDATION_EXPORT NSData* PmKeyPacketWithPublicKeyBin(PmSessionSplit* sessionSplit, NSData* publicKey, NSError** error);

FOUNDATION_EXPORT NSString* PmPublicKey(NSString* privateKey, NSError** error);

FOUNDATION_EXPORT NSString* PmReadClearSignedMessage(NSString* signedMessage, NSError** error);

FOUNDATION_EXPORT PmEncryptedSplit* PmSeparateKeyAndData(NSString* encrypted, NSError** error);

FOUNDATION_EXPORT NSString* PmSignBinDetached(NSData* plainData, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* PmSignBinDetachedBinKey(NSData* plainData, NSData* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* PmSignTextDetached(NSString* plainText, NSString* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSString* PmSignTextDetachedBinKey(NSString* plainText, NSData* privateKey, NSString* passphrase, NSError** error);

FOUNDATION_EXPORT NSData* PmSymmetricKeyPacketWithPassword(PmSessionSplit* sessionSplit, NSString* password, NSError** error);

FOUNDATION_EXPORT NSData* PmUnArmor(NSString* input, NSError** error);

FOUNDATION_EXPORT BOOL PmVerifyBinSignDetached(NSString* signature, NSData* plainData, NSString* publicKey, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT BOOL PmVerifyBinSignDetachedBinKey(NSString* signature, NSData* plainData, NSData* publicKey, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT BOOL PmVerifyTextSignDetached(NSString* signature, NSString* plainText, NSString* publicKey, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT BOOL PmVerifyTextSignDetachedBinKey(NSString* signature, NSString* plainText, NSData* publicKey, BOOL* ret0_, NSError** error);

FOUNDATION_EXPORT NSString* PmVersion(void);

#endif
