import BackgroundTasks
import CoreData
import LocalAuthentication
import Network
import ProtonCoreCrypto
import ProtonCoreEnvironment
import ProtonCoreKeymaker
import ProtonCorePaymentsUI
import ProtonCoreServices
import ProtonCoreTestingToolkit

import class ProtonCoreDataModel.Address
import class PromiseKit.Promise
import class ProtonCoreDataModel.UserInfo

@testable import ProtonMail

{% for type in types.protocols where type|annotated:"mock" %}
class Mock{{ type.name }}: {{ type.name }} {
    {% for variable in type.instanceVariables|!definedInExtension %}
    @PropertyStub(\Mock{{ type.name }}.{{ variable.name }}, initialGet: {% if variable.typeName.isOptional %}nil{% elif variable.type.kind == "enum" %}.{{ variable.type.cases[0].name }}{% else %}{{ variable.typeName }}(){% endif %}) var {{ variable.name }}Stub
    var {{ variable.name }}: {{ variable.typeName }} {
    {% if variable.isMutable %}
        get {
            {{ variable.name }}Stub()
        }
        set {
            {{ variable.name }}Stub(newValue)
        }
    }
    {% else %}
        {{ variable.name }}Stub()
    }
    {% endif %}

    {% endfor %}
    {% for method in type.methods|!definedInExtension %}
    @{% if method.throws %}Throwing{% endif %}FuncStub(Mock{{ type.name }}.{{ method.callName }}{% if method.returnTypeName.name != "Void" %}, initialReturn: {% if method.returnTypeName.isOptional %}nil{% elif method.returnType.kind == "protocol" or method.returnTypeName.isTuple or (method.returnType.initializers.count == 1 and  method.returnType.initializers[0].parameters.count > 0) %}.crash{% else %}{{ method.returnTypeName }}(){% endif %}{% endif %}) var {{ method.callName }}Stub
    func {{ method.name }}{% if method.throws %} throws{% endif %}{% if method.returnTypeName.name != "Void" %} -> {{ method.returnTypeName }}{% endif %} {
        {% if method.throws %}try {% endif %}{{ method.callName }}Stub({% for parameter in method.parameters %}{{ parameter.name }}{{ ', ' if not forloop.last }}{% endfor %})
    }

{% endfor %}
}

{% endfor %}
