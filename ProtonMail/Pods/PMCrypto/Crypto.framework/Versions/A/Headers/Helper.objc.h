// Objective-C API for talking to github.com/ProtonMail/gopenpgp/v2/helper Go package.
//   gobind -lang=objc github.com/ProtonMail/gopenpgp/v2/helper
//
// File is generated by gobind. Do not edit.

#ifndef __Helper_H__
#define __Helper_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"

#include "Crypto.objc.h"

@class HelperExplicitVerifyMessage;

@interface HelperExplicitVerifyMessage : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) CryptoPlainMessage* _Nullable message;
@property (nonatomic) CryptoSignatureVerificationError* _Nullable signatureVerificationError;
@end

/**
 * DecryptAttachment takes a keypacket and datpacket
and returns a decrypted PlainMessage
Specifically designed for attachments rather than text messages.
 */
FOUNDATION_EXPORT CryptoPlainMessage* _Nullable HelperDecryptAttachment(NSData* _Nullable keyPacket, NSData* _Nullable dataPacket, CryptoKeyRing* _Nullable keyRing, NSError* _Nullable* _Nullable error);

/**
 * DecryptExplicitVerify decrypts an armored PGP message given a private key
and its passphrase and verifies the embedded signature. Returns the plain
data or an error on signature verification failure.
 */
FOUNDATION_EXPORT HelperExplicitVerifyMessage* _Nullable HelperDecryptExplicitVerify(CryptoPGPMessage* _Nullable pgpMessage, CryptoKeyRing* _Nullable privateKeyRing, CryptoKeyRing* _Nullable publicKeyRing, int64_t verifyTime, NSError* _Nullable* _Nullable error);

/**
 * DecryptMessageArmored decrypts an armored PGP message given a private key
and its passphrase.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptMessageArmored(NSString* _Nullable privateKey, NSData* _Nullable passphrase, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * DecryptMessageWithPassword decrypts an armored message with a random token.
The algorithm is derived from the armoring.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptMessageWithPassword(NSData* _Nullable password, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * DecryptVerifyAttachment decrypts and verifies an attachment split into the
keyPacket, dataPacket and an armored (!) signature, given a publicKey, and a
privateKey with its passphrase. Returns the plain data or an error on
signature verification failure.
 */
FOUNDATION_EXPORT NSData* _Nullable HelperDecryptVerifyAttachment(NSString* _Nullable publicKey, NSString* _Nullable privateKey, NSData* _Nullable passphrase, NSData* _Nullable keyPacket, NSData* _Nullable dataPacket, NSString* _Nullable armoredSignature, NSError* _Nullable* _Nullable error);

/**
 * DecryptVerifyMessageArmored decrypts an armored PGP message given a private
key and its passphrase and verifies the embedded signature. Returns the
plain data or an error on signature verification failure.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperDecryptVerifyMessageArmored(NSString* _Nullable publicKey, NSString* _Nullable privateKey, NSData* _Nullable passphrase, NSString* _Nullable ciphertext, NSError* _Nullable* _Nullable error);

/**
 * EncryptAttachment encrypts a file given a plainData and a fileName.
Returns a PGPSplitMessage containing a session key packet and symmetrically
encrypted data. Specifically designed for attachments rather than text
messages.
 */
FOUNDATION_EXPORT CryptoPGPSplitMessage* _Nullable HelperEncryptAttachment(NSData* _Nullable plainData, NSString* _Nullable fileName, CryptoKeyRing* _Nullable keyRing, NSError* _Nullable* _Nullable error);

/**
 * EncryptMessageArmored generates an armored PGP message given a plaintext and
an armored public key.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptMessageArmored(NSString* _Nullable key, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * EncryptMessageWithPassword encrypts a string with a passphrase using AES256.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptMessageWithPassword(NSData* _Nullable password, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * EncryptSignMessageArmored generates an armored signed PGP message given a
plaintext and an armored public key a private key and its passphrase.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperEncryptSignMessageArmored(NSString* _Nullable publicKey, NSString* _Nullable privateKey, NSData* _Nullable passphrase, NSString* _Nullable plaintext, NSError* _Nullable* _Nullable error);

/**
 * GenerateKey generates a key of the given keyType ("rsa" or "x25519"), encrypts it, and returns an armored string.
If keyType is "rsa", bits is the RSA bitsize of the key.
If keyType is "x25519" bits is unused.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperGenerateKey(NSString* _Nullable name, NSString* _Nullable email, NSData* _Nullable passphrase, NSString* _Nullable keyType, long bits, NSError* _Nullable* _Nullable error);

/**
 * GetJsonSHA256Fingerprints returns the SHA256 fingeprints of key and subkeys,
encoded in JSON, since gomobile can not handle arrays.
 */
FOUNDATION_EXPORT NSData* _Nullable HelperGetJsonSHA256Fingerprints(NSString* _Nullable publicKey, NSError* _Nullable* _Nullable error);

// skipped function GetSHA256Fingerprints with unsupported parameter or return types


/**
 * SignCleartextMessage signs text given a private keyring, canonicalizes and
trims the newlines, and returns the PGP-compliant special armoring.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperSignCleartextMessage(CryptoKeyRing* _Nullable keyRing, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * SignCleartextMessageArmored signs text given a private key and its
passphrase, canonicalizes and trims the newlines, and returns the
PGP-compliant special armoring.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperSignCleartextMessageArmored(NSString* _Nullable privateKey, NSData* _Nullable passphrase, NSString* _Nullable text, NSError* _Nullable* _Nullable error);

/**
 * UpdatePrivateKeyPassphrase decrypts the given armored privateKey with oldPassphrase,
re-encrypts it with newPassphrase, and returns the new armored key.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperUpdatePrivateKeyPassphrase(NSString* _Nullable privateKey, NSData* _Nullable oldPassphrase, NSData* _Nullable newPassphrase, NSError* _Nullable* _Nullable error);

/**
 * VerifyCleartextMessage verifies PGP-compliant armored signed plain text
given the public keyring and returns the text or err if the verification
fails.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperVerifyCleartextMessage(CryptoKeyRing* _Nullable keyRing, NSString* _Nullable armored, int64_t verifyTime, NSError* _Nullable* _Nullable error);

/**
 * VerifyCleartextMessageArmored verifies PGP-compliant armored signed plain
text given the public key and returns the text or err if the verification
fails.
 */
FOUNDATION_EXPORT NSString* _Nonnull HelperVerifyCleartextMessageArmored(NSString* _Nullable publicKey, NSString* _Nullable armored, int64_t verifyTime, NSError* _Nullable* _Nullable error);

#endif
