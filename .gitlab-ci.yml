include:
  - local: ".gitlab-ci.d/i18n.yml"

  - project: 'proton/devops/atlas-deploy'
    file: '/scenarios/pipeline-env.yml'

  - project: "tpe/testmo-reporter"
    file: '/scenarios/testmo-script.yml'

variables:
  LANG: "en_US.UTF-8"
  GEM_HOME: "$CI_PROJECT_DIR/gem"
  ATLAS_DEPLOY_LIST: ""
  ATLAS_LINK_APP: mail
  ATLAS_DEPLOY_ENV: "true"
  GIT_SUBMODULE_STRATEGY: recursive

# See https://confluence.protontech.ch/pages/viewpage.action?pageId=121918293
stages:
  - i18n
  - linting
  - build
  - deploy
  - test
  - report
  - cleanup
  - distribute
  - bot

.setup_basic_tools: &setup_basic_tools
  - brew bundle --file="$CI_PROJECT_DIR/ProtonMail/Brewfile" --force
  - mint bootstrap

.setup_ruby: &setup_ruby
  - cd ProtonMail
  - bundle install
  - cd ..

.setup_project: &setup_project
  - *setup_basic_tools
  - *setup_ruby
  - ./ProtonMail/xcodeGenHelper.sh

.setup_project_for_ui_tests: &setup_project_for_ui_tests
  - defaults write com.apple.iphonesimulator ConnectHardwareKeyboard 0 # Fixed UI tests failing on secure field

  - *setup_project

.build_for_testflight: &build_for_testflight
  - cd ProtonMail
  - base64 -D -o Certificates.p12 <<< $DISTRIBUTION_CERTIFICATE
  - bundle exec fastlane ios build

.enterprise_config_setting: &enterprise_config_setting
  - cd ProtonMail
  - base64 -D -o Certificates.p12 <<< $ENTERPRISE_DISTRIBUTION_CERTIFICATE
  - base64 -D -o Siri.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_SIRI_PROVISIONPROFILE
  - base64 -D -o Enterprise.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_APP_PROVISIONPROFILE
  - base64 -D -o PushService.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_PUSHSERVICE_PROVISIONPROFILE
  - base64 -D -o Share.mobileprovision <<< $ENTERPRISE_DISTRIBUTION_SHARE_PROVISIONPROFILE

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: $CI_COMMIT_BRANCH == "develop"

default:
  cache:
    key: "$CI_PROJECT_NAME"
    paths:
      - bundler-cache/

linting:
  stage: linting
  except:
    - schedules
  script:
    - ./Scripts/check_link_availability.sh
  tags:
    - iOS_GENERAL

build:debug:for-testing:
  stage: build
  allow_failure: false
  interruptible: true
  artifacts:
    when: on_success
    paths:
      - test_output/Build/Products/Debug-iphonesimulator/ProtonMail.app
      - test_output/Build/Products/Debug-iphonesimulator/ProtonMailUITests-Runner.app
      - build_job_pwd.txt
    expire_in: 1 day
  before_script:
    - *setup_project
  script:
    - cd ProtonMail
    - bundle exec fastlane build_for_testing
    # record the current directory so that it can be used by the test jobs to calculate code coverage if they run on a different runner
    - echo $PWD >> ../build_job_pwd.txt
  tags:
    - iOS_GENERAL

test:unit:
  stage: test
  coverage: '/Test Coverage: \d*.\d*%/'
  only:
    - master
    - main
    - develop
    - /^release\/.*$/
    - merge_requests
  except:
    - schedules
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
    paths:
      - test_output/slatherOutput/
  before_script:
    - *setup_project
  script:
    - cd ProtonMail
    - bundle exec fastlane unit_test
    - ../Scripts/generate_code_coverage_report.sh
  tags:
    - iOS_GENERAL

test:ui:smoke:
  dependencies:
    - deploy:review
    - build:debug:for-testing
  stage: test
  except:
    - schedules
  only:
    refs:
      - master
      - main
      - develop
      - /^release\/.*$/
      - merge_requests
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
      junit:
        - test_output/TestResults/report.xml
  before_script:
    - *setup_project_for_ui_tests
  script:
    - echo DYNAMIC_DOMAIN="${DYNAMIC_DOMAIN}"
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:"SmokeTests" concurrent_workers:"2"
    - ../Scripts/generate_code_coverage_report.sh
  tags:
    - iOS_GENERAL

test:ui:sanity:
  dependencies:
    - deploy:review
    - build:debug:for-testing
  stage: test
  rules:
      # Allow job to run automatically on each scheduled job with sanity test type
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TEST_TYPE == "sanity"'
      when: always
    - when: manual
  before_script:
    - *setup_project_for_ui_tests
    - echo DYNAMIC_DOMAIN="${DYNAMIC_DOMAIN}"
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:"SanityTests" concurrent_workers:"4"
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: test_output/slatherOutput/cobertura.xml
      junit: test_output/TestResults/report.xml
  allow_failure: true
  tags:
    - iOS_UITEST

test:ui:feature:
  dependencies:
    - deploy:review
    - build:debug:for-testing
  stage: test
  rules:
    - if: '$TEST_TYPE == "feature"'
      when: always
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      junit: test_output/TestResults/report.xml
  before_script:
    - *setup_project_for_ui_tests
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:$TEST_PLAN concurrent_workers:$NUMBER_OF_DEVICES
  tags:
    - iOS_UITEST

test:ui:regression:
  dependencies:
    - deploy:review
    - build:debug:for-testing
  stage: test
  rules:
      # Allow job to run automatically on each scheduled job with regression test type
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $TEST_TYPE == "regression"'
      when: always
    - when: manual
  artifacts:
    when: always
    name: "test-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      junit: test_output/TestResults/report.xml
  before_script:
    - *setup_project_for_ui_tests
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:RegressionTests concurrent_workers:$NUMBER_OF_DEVICES
  allow_failure: true
  tags:
    - iOS_UITEST

test:ui:monkey:
  dependencies:
    - deploy:review
    - build:debug:for-testing
  timeout: 2 hours
  stage: test
  rules:
    - if: '$TEST_TYPE == "monkey"'
  artifacts:
    when: always
    name: "monkey-report"
    paths:
      - test_output/TestResults
    expire_in: 10 days
    reports:
      junit: test_output/TestResults/report.xml
  before_script:
    - *setup_project_for_ui_tests
  script:
    - cd ProtonMail
    - bundle exec fastlane ui_test testplan:MonkeyTests concurrent_workers:1
  tags:
    - iOS_UITEST

report:slack:feature:
  dependencies:
    - test:ui:feature
    - test:ui:regression
  image: $CI_REGISTRY/tpe/test-scripts
  stage: report
  rules:
    - if: '$TEST_TYPE == "regression" || $TEST_TYPE == "feature"'
      when: always
  script:
    - test_reporter.py
      --path test_output/TestResults/
      --platform ios
      --job-name $TEST_PLAN
      --slack-channel "$SLACK_CHANNEL"
  allow_failure: true
  tags:
    - shared-small

report:slack:monkey:
  dependencies:
    - test:ui:monkey
  image: $CI_REGISTRY/tpe/test-scripts
  stage: report
  rules:
    - if: '$TEST_TYPE == "monkey"'
      when: always
  script:
    - test_reporter.py
      --path test_output/TestResults/
      --platform ios
      --job-name Mail-iOS-Monkey-tests
      --slack-channel mail-ios-uitests
  allow_failure: true
  tags:
    - shared-small

report:testmo:regression:
  dependencies:
    - test:ui:regression
  stage: report
  extends: .testmo-upload
  rules:
    - when: manual
  before_script:
    - echo "$MILESTONE"
    - 'if [ -z $MILESTONE ]; then echo "Testmo MILESTONE is not provided. Failing the job."; exit 1; fi'
  variables:
    PROJECT_ID: "7"
    NAME: "$TEST_PLAN"
    MILESTONE: "$MILESTONE"
    TAGS: "$CI_COMMIT_REF_SLUG"
    SOURCE: "ios"
    RESULT_FOLDER: "./test_output/TestResults/*.xml"
  allow_failure: true
  tags:
    - shared-small

report:testmo:sanity:
  needs:
    - test:ui:sanity
  stage: report
  extends: .testmo-upload
  rules:
    - when: manual
  before_script:
    - echo "$MILESTONE"
    - 'if [ -z $MILESTONE ]; then echo "Testmo MILESTONE is not provided. Failing the job."; exit 1; fi'
  variables:
    PROJECT_ID: "7"
    NAME: "SanityTests"
    MILESTONE: "$MILESTONE"
    TAGS: "$CI_COMMIT_REF_SLUG"
    SOURCE: "ios"
    RESULT_FOLDER: "./test_output/TestResults/*.xml"
  allow_failure: true
  tags:
    - shared-small

# --- Build app and send to testflight
testflight:alpha:
  dependencies: []
  needs: []
  stage: distribute
  variables:
    GIT_STRATEGY: clone
    GIT_DEPTH: "0"
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true
  artifacts:
    name: "iOS mail app builds"
    paths:
      - ./ProtonMail/outputs/ProtonMail.app.dSYM.zip
    expire_in: 90 days
  before_script:
    - *setup_project
  script:
    - *build_for_testflight
    - ./fastlane/add_git_tag.sh
  tags:
    - iOS_RELEASE_BUILD

# --- Build enterprise app for test and upload
firebase:qa:
  dependencies: []
  needs: []
  stage: distribute
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: manual
      allow_failure: true
  artifacts:
    name: "iOS mail app test enterprise build"
    paths:
      - ./ProtonMail/outputs/ProtonMail.app.dSYM.zip
    expire_in: 90 days
  before_script:
    - *setup_project
  script:
    - *enterprise_config_setting
    - bundle exec fastlane ios enterprise usingTimeStamp:true
  tags:
    - iOS_GENERAL
