From 7caa7606518a15d9b27889db96e56addda0beaad Mon Sep 17 00:00:00 2001
From: Anson Chen <uvtg45@protonmail.com>
Date: Mon, 6 Jul 2020 14:47:57 +0800
Subject: [PATCH] remvoe UIWebView in  recaptchaVC

---
 .../SignIn/RecaptchaViewController.swift      | 240 ++++++++++--------
 .../Controller/StoryBoard/SignIn.storyboard   |  23 +-
 2 files changed, 132 insertions(+), 131 deletions(-)

diff --git a/ProtonMail/ProtonMail/Controller/SignIn/RecaptchaViewController.swift b/ProtonMail/ProtonMail/Controller/SignIn/RecaptchaViewController.swift
index 7296a056..678f7d99 100644
--- a/ProtonMail/ProtonMail/Controller/SignIn/RecaptchaViewController.swift
+++ b/ProtonMail/ProtonMail/Controller/SignIn/RecaptchaViewController.swift
@@ -24,9 +24,7 @@
 import UIKit
 import MBProgressHUD
 
-class RecaptchaViewController: UIViewController, UIWebViewDelegate {
-    
-    @IBOutlet weak var webView: UIWebView!
+class RecaptchaViewController: UIViewController {
     
     //define
     fileprivate let hidePriority : UILayoutPriority = UILayoutPriority(rawValue: 1.0);
@@ -37,11 +35,12 @@ class RecaptchaViewController: UIViewController, UIWebViewDelegate {
     @IBOutlet weak var titleTopPaddingConstraint: NSLayoutConstraint!
     @IBOutlet weak var titleLeftPaddingConstraint: NSLayoutConstraint!
     @IBOutlet weak var scrollBottomPaddingConstraint: NSLayoutConstraint!
-    @IBOutlet weak var webViewHeightConstraint: NSLayoutConstraint!
 
     @IBOutlet weak var topLeftButton: UIButton!
     @IBOutlet weak var topTitleLabel: UILabel!
     @IBOutlet weak var continueButton: UIButton!
+    private var wkWebView: WKWebView!
+    private var wkWebViewHeightConstraint: NSLayoutConstraint!
     
     fileprivate let kSegueToNotificationEmail = "sign_up_pwd_email_segue"
     fileprivate var startVerify : Bool = false
@@ -50,56 +49,23 @@ class RecaptchaViewController: UIViewController, UIWebViewDelegate {
     fileprivate var doneClicked : Bool = false
     var viewModel : SignupViewModel!
     
-    func configConstraint(_ show : Bool) -> Void {
-        let level = show ? showPriority : hidePriority
-        
-        logoTopPaddingConstraint.priority = level
-        logoLeftPaddingConstraint.priority = level
-        titleTopPaddingConstraint.priority = level
-        titleLeftPaddingConstraint.priority = level
+    override var preferredStatusBarStyle : UIStatusBarStyle {
+        return UIStatusBarStyle.default;
     }
     
     override func viewDidLoad() {
         super.viewDidLoad()
         
-        topLeftButton.setTitle(LocalString._general_back_action, for: .normal)
-        topTitleLabel.text = LocalString._human_verification
-        continueButton.setTitle(LocalString._genernal_continue, for: .normal)
-        
-        resetChecking()
-        webView.scrollView.isScrollEnabled = false
-        
-        URLCache.shared.removeAllCachedResponses();
-        MBProgressHUD.showAdded(to: webView, animated: true)
-        //let recptcha = NSURL(string: "https://secure.protonmail.com/mobile.html")!
-        
-        let recptcha = URL(string: "https://secure.protonmail.com/captcha/captcha.html?token=signup&client=ios&host=\(Server.live.hostUrl)")!
-        let requestObj = URLRequest(url: recptcha)
-        webView.loadRequest(requestObj)
+        self.setupTitles()
+        self.resetChecking()
+        self.setupWebView()
     }
 
-    override var preferredStatusBarStyle : UIStatusBarStyle {
-        return UIStatusBarStyle.default;
-    }
-    
     override func viewWillAppear(_ animated: Bool) {
         super.viewWillAppear(animated)
         navigationController?.setNavigationBarHidden(true, animated: true)
     }
-    
-    override func viewDidAppear(_ animated: Bool) {
-        super.viewDidAppear(animated)
-    }
-    
-    override func viewWillDisappear(_ animated: Bool) {
-        super.viewWillDisappear(animated)
-    }
-    
-    override func didReceiveMemoryWarning() {
-        super.didReceiveMemoryWarning()
-    }
-    
-    
+
     // MARK: - Navigation
     // In a storyboard-based application, you will often want to do a little preparation before navigation
     override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
@@ -108,29 +74,18 @@ class RecaptchaViewController: UIViewController, UIWebViewDelegate {
             viewController.viewModel = self.viewModel
         }
     }
-
-    @IBAction func backAction(_ sender: UIButton) {
-        stopLoading = true
-        let _ = self.navigationController?.popViewController(animated: true)
-    }
-    
-    func startChecking() {
-        
-    }
     
-    func resetChecking() {
-        checkUserStatus = false
+    // MARK: IBAction
+    @IBAction private func tapAction(_ sender: UITapGestureRecognizer) {
+
     }
     
-    func finishChecking(_ isOk : Bool) {
-        if isOk {
-            checkUserStatus = true
-        } else {
-
-        }
+    @IBAction private func backAction(_ sender: UIButton) {
+        stopLoading = true
+        let _ = self.navigationController?.popViewController(animated: true)
     }
     
-    @IBAction func createAccountAction(_ sender: UIButton) {
+    @IBAction private func createAccountAction(_ sender: UIButton) {
         if viewModel.isTokenOk() {
             self.finishChecking(true)
             if doneClicked {
@@ -167,84 +122,147 @@ class RecaptchaViewController: UIViewController, UIWebViewDelegate {
             self.present(alert, animated: true, completion: nil)
         }
     }
+}
+
+// MARK: Setup
+extension RecaptchaViewController {
+    private func setupTitles() {
+        topLeftButton.setTitle(LocalString._general_back_action, for: .normal)
+        topTitleLabel.text = LocalString._human_verification
+        continueButton.setTitle(LocalString._genernal_continue, for: .normal)
+    }
     
-    func goNotificationEmail() {
-        self.performSegue(withIdentifier: self.kSegueToNotificationEmail, sender: self)
+    private func setupWebView() {
+//        webView.scrollView.isScrollEnabled = false
+//        URLCache.shared.removeAllCachedResponses();
+//        MBProgressHUD.showAdded(to: webView, animated: true)
+        //let recptcha = NSURL(string: "https://secure.protonmail.com/mobile.html")!
+        
+        let recptcha = URL(string: "https://secure.protonmail.com/captcha/captcha.html?token=signup&client=ios&host=\(Server.live.hostUrl)")!
+        let requestObj = URLRequest(url: recptcha)
+//        webView.loadRequest(requestObj)
+        
+        // remove cache
+        let websiteDataTypes = NSSet(array: [WKWebsiteDataTypeDiskCache, WKWebsiteDataTypeMemoryCache])
+        let date = Date(timeIntervalSince1970: 0)
+        WKWebsiteDataStore.default().removeData(ofTypes: websiteDataTypes as! Set<String>, modifiedSince: date, completionHandler:{ })
+        
+        self.wkWebView = WKWebView(frame: .zero, configuration: WKWebViewConfiguration())
+        self.wkWebView.navigationDelegate = self
+        self.wkWebView.scrollView.isScrollEnabled = false
+        self.wkWebView.translatesAutoresizingMaskIntoConstraints = false
+        MBProgressHUD.showAdded(to: self.wkWebView, animated: true)
+        self.view.addSubview(self.wkWebView)
+        
+        self.wkWebView.centerXAnchor.constraint(equalTo: self.view.centerXAnchor).isActive = true
+        self.wkWebView.widthAnchor.constraint(equalToConstant: 345).isActive = true
+        self.wkWebView.topAnchor.constraint(equalTo: self.topTitleLabel.bottomAnchor, constant: 18).isActive = true
+        self.wkWebView.bottomAnchor.constraint(equalTo: self.continueButton.topAnchor, constant: -24).isActive = true
+        self.wkWebViewHeightConstraint = self.wkWebView.heightAnchor.constraint(equalToConstant: 85)
+        self.wkWebViewHeightConstraint.isActive = true
+        self.wkWebView.load(requestObj)
     }
     
-    func webView(_ webView: UIWebView, shouldStartLoadWith request: URLRequest, navigationType: UIWebView.NavigationType) -> Bool {
-        PMLog.D("\(request)")
-        let urlString = request.url?.absoluteString;
-
-        if urlString?.contains("https://www.google.com/recaptcha/api2/frame") == true {
-            startVerify = true;
-        }
+    private func configConstraint(_ show : Bool) -> Void {
+        let level = show ? showPriority : hidePriority
         
-        if urlString?.contains(".com/fc/api/nojs") == true {
-            startVerify = true;
-        }
-        if urlString?.contains("fc/apps/canvas") == true {
-            startVerify = true;
+        logoTopPaddingConstraint.priority = level
+        logoLeftPaddingConstraint.priority = level
+        titleTopPaddingConstraint.priority = level
+        titleLeftPaddingConstraint.priority = level
+    }
+    
+    private func resetChecking() {
+        checkUserStatus = false
+    }
+    
+    private func finishChecking(_ isOk : Bool) {
+        if isOk {
+            checkUserStatus = true
+        } else {
+
         }
+    }
+    
+    private func goNotificationEmail() {
+        self.performSegue(withIdentifier: self.kSegueToNotificationEmail, sender: self)
+    }
+}
+
+extension RecaptchaViewController: WKNavigationDelegate {
+    func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
         
-        if urlString?.contains("about:blank") == true {
-            startVerify = true;
+        PMLog.D("\(navigationAction.request)")
+        guard let urlString = navigationAction.request.url?.absoluteString else {
+            decisionHandler(.allow)
+            return
         }
         
-        if urlString?.contains("https://www.google.com/intl/en/policies/privacy") == true {
-            return false
-        }
-
-        if urlString?.contains("how-to-solve-") == true {
-            return false
+        let verifies = [
+            "https://www.google.com/recaptcha/api2/frame",
+            ".com/fc/api/nojs",
+            "fc/apps/canvas",
+            "about:blank"
+        ]
+        if verifies.contains(urlString) {
+            startVerify = true
         }
-        if urlString?.contains("https://www.google.com/intl/en/policies/terms") == true {
-            return false
+     
+        let forbiden = [
+            "https://www.google.com/intl/en/policies/privacy",
+            "how-to-solve-",
+            "https://www.google.com/intl/en/policies/terms"
+        ]
+        if forbiden.contains(urlString) {
+            decisionHandler(.cancel)
+            return
         }
-
-        if let _ = urlString?.range(of: "https://secure.protonmail.com/expired_recaptcha_response://") {
+        
+        if urlString.contains("https://secure.protonmail.com/expired_recaptcha_response://") {
             viewModel.setRecaptchaToken("", isExpired: true)
             resetWebviewHeight()
             webView.reload()
-            return false
-        }
-        else if let _ = urlString?.range(of: "https://secure.protonmail.com/captcha/recaptcha_response://") {
-            if let token = urlString?.replacingOccurrences(of: "https://secure.protonmail.com/captcha/recaptcha_response://", with: "", options: NSString.CompareOptions.widthInsensitive, range: nil) {
-                viewModel.setRecaptchaToken(token, isExpired: false)
-            }
+            decisionHandler(.cancel)
+            return
+        } else if urlString.contains("https://secure.protonmail.com/captcha/recaptcha_response://") {
+            let token = urlString.replacingOccurrences(of: "https://secure.protonmail.com/captcha/recaptcha_response://", with: "", options: NSString.CompareOptions.widthInsensitive, range: nil)
+            viewModel.setRecaptchaToken(token, isExpired: false)
             resetWebviewHeight()
-            return false
+            decisionHandler(.cancel)
+            return
         }
-        return true
+        
+        decisionHandler(.allow)
     }
     
-    func webViewDidFinishLoad(_ webView: UIWebView) {
-        if startVerify {
-            if let _ = webView.stringByEvaluatingJavaScript(from: "document.body.scrollHeight;") {
-                let height = CGFloat(500)
-                webViewHeightConstraint.constant = height;
+    func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
+        MBProgressHUD.hide(for: self.wkWebView, animated: true)
+        guard startVerify else {return}
+        startVerify = false
+        webView.evaluateJavaScript("document.body.scrollHeight;") { (_, error) in
+            if let err = error {
+                PMLog.D("Get scroll height failed, error: \(err.localizedDescription)")
+                return
             }
-            startVerify = false
+            self.wkWebViewHeightConstraint.constant = 500
         }
-        MBProgressHUD.hide(for: self.webView, animated: true)
     }
     
     func resetWebviewHeight() {
-        if let _ = webView.stringByEvaluatingJavaScript(from: "document.body.scrollHeight;") {
-            let height = CGFloat(85)
-            webViewHeightConstraint.constant = height;
+        self.wkWebView.evaluateJavaScript("document.body.scrollHeight;") { (_, error) in
+            if let err = error {
+                PMLog.D("Get scroll height failed, error: \(err.localizedDescription)")
+                return
+            }
+            self.wkWebViewHeightConstraint.constant = 85
         }
     }
     
-    func webViewDidStartLoad(_ webView: UIWebView) {
+    func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
         PMLog.D("")
     }
     
-    func webView(_ webView: UIWebView, didFailLoadWithError error: Error) {
+    func webView(_ webView: WKWebView, didFailProvisionalNavigation navigation: WKNavigation!, withError error: Error) {
         PMLog.D("")
     }
-    
-    @IBAction func tapAction(_ sender: UITapGestureRecognizer) {
-
-    }
 }
diff --git a/ProtonMail/ProtonMail/Controller/StoryBoard/SignIn.storyboard b/ProtonMail/ProtonMail/Controller/StoryBoard/SignIn.storyboard
index 81c8c49a..ce7100f3 100644
--- a/ProtonMail/ProtonMail/Controller/StoryBoard/SignIn.storyboard
+++ b/ProtonMail/ProtonMail/Controller/StoryBoard/SignIn.storyboard
@@ -488,10 +488,10 @@
                                 <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
                                 <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                             </imageView>
-                            <scrollView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="UaR-Wn-XvY">
+                            <scrollView clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="scaleToFill" ambiguous="YES" translatesAutoresizingMaskIntoConstraints="NO" id="UaR-Wn-XvY">
                                 <rect key="frame" x="0.0" y="0.0" width="375" height="667"/>
                                 <subviews>
-                                    <view contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="x5O-eb-fcJ" userLabel="Content View">
+                                    <view contentMode="scaleToFill" ambiguous="YES" translatesAutoresizingMaskIntoConstraints="NO" id="x5O-eb-fcJ" userLabel="Content View">
                                         <rect key="frame" x="0.0" y="0.0" width="375" height="350"/>
                                         <subviews>
                                             <button opaque="NO" contentMode="scaleToFill" contentHorizontalAlignment="left" contentVerticalAlignment="center" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="b8d-qE-UH9">
@@ -523,18 +523,7 @@
                                                     <constraint firstAttribute="height" constant="16" id="zos-ff-SQ4"/>
                                                 </constraints>
                                             </imageView>
-                                            <webView contentMode="scaleToFill" translatesAutoresizingMaskIntoConstraints="NO" id="dlP-lx-EdD">
-                                                <rect key="frame" x="15" y="175" width="345" height="85"/>
-                                                <color key="backgroundColor" red="0.0" green="0.0" blue="0.0" alpha="0.0" colorSpace="custom" customColorSpace="sRGB"/>
-                                                <constraints>
-                                                    <constraint firstAttribute="width" constant="345" id="KZD-4A-ynw"/>
-                                                    <constraint firstAttribute="height" constant="85" id="aU3-Hx-VhC"/>
-                                                </constraints>
-                                                <connections>
-                                                    <outlet property="delegate" destination="XYV-2Y-X0C" id="LJa-r6-xeN"/>
-                                                </connections>
-                                            </webView>
-                                            <button opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="uOc-mm-9Q7">
+                                            <button opaque="NO" clipsSubviews="YES" contentMode="scaleToFill" ambiguous="YES" contentHorizontalAlignment="center" contentVerticalAlignment="center" buttonType="system" lineBreakMode="middleTruncation" translatesAutoresizingMaskIntoConstraints="NO" id="uOc-mm-9Q7">
                                                 <rect key="frame" x="87.5" y="284" width="200" height="42"/>
                                                 <color key="backgroundColor" red="0.56862745100000001" green="0.59999999999999998" blue="0.79607843140000001" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
                                                 <constraints>
@@ -567,14 +556,10 @@
                                             <constraint firstAttribute="trailing" relation="greaterThanOrEqual" secondItem="dx5-WV-bep" secondAttribute="trailing" constant="28" id="JLQ-Gk-ffI"/>
                                             <constraint firstAttribute="centerX" secondItem="TOy-0T-PLz" secondAttribute="centerX" priority="500" id="KiB-HO-tAR"/>
                                             <constraint firstItem="b8d-qE-UH9" firstAttribute="top" secondItem="x5O-eb-fcJ" secondAttribute="top" id="UQT-bp-eaw"/>
-                                            <constraint firstItem="uOc-mm-9Q7" firstAttribute="top" secondItem="dlP-lx-EdD" secondAttribute="bottom" priority="500" constant="24" id="Usl-xC-TLg"/>
-                                            <constraint firstAttribute="centerX" secondItem="dlP-lx-EdD" secondAttribute="centerX" priority="500" id="VV7-xs-gob"/>
                                             <constraint firstAttribute="centerX" secondItem="uOc-mm-9Q7" secondAttribute="centerX" priority="500" id="WAl-MT-M4y"/>
                                             <constraint firstAttribute="bottom" secondItem="uOc-mm-9Q7" secondAttribute="bottom" priority="500" constant="24" id="YzV-NY-wfX"/>
                                             <constraint firstItem="b8d-qE-UH9" firstAttribute="leading" secondItem="x5O-eb-fcJ" secondAttribute="leading" id="cmC-jP-jI9"/>
                                             <constraint firstItem="dx5-WV-bep" firstAttribute="top" secondItem="TOy-0T-PLz" secondAttribute="bottom" priority="500" constant="12" id="d1p-cD-FDS"/>
-                                            <constraint firstItem="dlP-lx-EdD" firstAttribute="top" secondItem="dx5-WV-bep" secondAttribute="bottom" constant="18" id="eP2-PM-DN1"/>
-                                            <constraint firstItem="dlP-lx-EdD" firstAttribute="leading" relation="greaterThanOrEqual" secondItem="x5O-eb-fcJ" secondAttribute="leading" priority="750" constant="3" id="k2v-UB-gCC"/>
                                             <constraint firstItem="dx5-WV-bep" firstAttribute="leading" relation="greaterThanOrEqual" secondItem="x5O-eb-fcJ" secondAttribute="leading" constant="28" id="sGI-d1-TXr"/>
                                             <constraint firstItem="TOy-0T-PLz" firstAttribute="top" secondItem="b8d-qE-UH9" secondAttribute="bottom" priority="500" constant="45" id="u6J-tC-aLC"/>
                                             <constraint firstItem="TOy-0T-PLz" firstAttribute="top" secondItem="b8d-qE-UH9" secondAttribute="bottom" priority="1" constant="18" id="uNL-9j-U9n"/>
@@ -614,8 +599,6 @@
                         <outlet property="titleTopPaddingConstraint" destination="CrW-rG-lgW" id="Nqf-5o-9UD"/>
                         <outlet property="topLeftButton" destination="b8d-qE-UH9" id="60A-YG-UEb"/>
                         <outlet property="topTitleLabel" destination="dx5-WV-bep" id="6eU-gB-DEb"/>
-                        <outlet property="webView" destination="dlP-lx-EdD" id="uo2-Ps-qhc"/>
-                        <outlet property="webViewHeightConstraint" destination="aU3-Hx-VhC" id="IAB-C0-Vzi"/>
                         <segue destination="YIP-X7-8Un" kind="show" identifier="sign_up_pwd_email_segue" id="BQ1-JS-Xpb"/>
                     </connections>
                 </viewController>
-- 
2.26.2

